{"version":3,"sources":["components/GetBooks.js","components/Pagination.js","components/BookSearchApp.js","App.js","reportWebVitals.js","index.js"],"names":["GetBooks","books","results","map","item","i","thumbnail","volumeInfo","imageLinks","className","src","alt","title","target","href","previewLink","id","pageCount","language","authors","publisher","description","Pagination","booksPerPage","totalBooks","paginate","pageNumbers","Math","ceil","push","aria-label","number","onClick","apikey","process","BookSearchApp","useState","inputSearch","setInput","setBookResult","currentPage","setCurrentPage","show","setShow","a","fetch","res","json","data","console","log","status","items","indexOfLastBook","indexOfFirstBook","currentBook","slice","onSubmit","e","preventDefault","window","alert","fetchBooks","placeholder","type","value","onChange","length","pageNumber","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8d61e6eb.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\n\r\nexport default function GetBooks(books){\r\n \r\n\r\n  const results = books.books.map((item, i) => {\r\n    let thumbnail = '';\r\n    if (item.volumeInfo.imageLinks) {\r\n      thumbnail = item.volumeInfo.imageLinks.thumbnail;\r\n    } \r\n    \r\n    return(\r\n                 \r\n          <div className=\"books-container\">\r\n            <div className=\"img-container\"  key={item.id}>\r\n                <img src={thumbnail} alt={item.volumeInfo.title} />                      \r\n                <div className=\"text-overlay\">         \r\n                    <a className=\"texto\" target=\"_blank\" href={item.volumeInfo.previewLink}>Preview</a>   \r\n                </div>\r\n            </div>\r\n            <div className=\"description\">\r\n              <h3>{item.volumeInfo.title}</h3>\r\n              <p> pages: {item.volumeInfo.pageCount}</p>\r\n              <p>lenguage: {item.volumeInfo.language}</p>\r\n              <p>authors: {item.volumeInfo.authors}</p>\r\n              <p>publisher: {item.volumeInfo.publisher}</p>\r\n              \r\n              <p className=\"desc\">{item.volumeInfo.description}</p>\r\n            </div>\r\n          </div>\r\n            \r\n            \r\n       \r\n         )\r\n  \r\n  })\r\n\r\n  return (\r\n    <>\r\n    <div >\r\n    {results} \r\n    </div>\r\n            \r\n  </>\r\n  )\r\n\r\n\r\n}\r\n\r\n","import React from 'react'\r\n\r\nconst Pagination = ({booksPerPage,totalBooks,paginate}) => {\r\n\r\n    const pageNumbers=[];\r\n    \r\n\r\n    for (let i=1; i <= Math.ceil(totalBooks/booksPerPage) ; i++ ){\r\n        pageNumbers.push(i)\r\n    }\r\n\r\n    return(\r\n        <div className=\"nav \">\r\n        <nav aria-label=\"Page navigation example\">\r\n            <ul className=\"pagination\">  \r\n                {pageNumbers.map(number=>(\r\n                    <li key={number} className=\"page-item\">\r\n                        <a  onClick={()=>paginate(number)} href=\"#\" className=\"page-link text-dark\">{number}</a>\r\n                        \r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </nav>\r\n        </div>\r\n                   \r\n    )\r\n\r\n}\r\n\r\nexport default Pagination\r\n\r\n","import React,{ useState } from 'react'\r\nimport GetBooks from './GetBooks';\r\nimport Pagination from './Pagination'\r\n\r\nconst apikey = process.env.REACT_APP_BOOK_KEY\r\n\r\nexport default function BookSearchApp(){\r\n\r\n    // states \r\n    const [inputSearch, setInput] = useState(\"\");\r\n    const [books, setBookResult] =useState([]);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [booksPerPage] =useState(10);\r\n    const [show, setShow] = useState(false)\r\n    \r\n    \r\n\r\n        // fetch function to retrieve data\r\n        async function fetchBooks (){\r\n            \r\n            const res = await fetch(\r\n                `https://www.googleapis.com/books/v1/volumes?q=${inputSearch}&key=${apikey}&maxResults=40`\r\n            )\r\n            const data = await res.json()\r\n            console.log(res.status);\r\n            setBookResult(data.items)\r\n            \r\n           \r\n            \r\n            \r\n        };\r\n    \r\n    function handleSearch(e){\r\n        e.preventDefault();\r\n        if (inputSearch === \"\"){\r\n            window.alert(\"The Search field is empty!\")\r\n        }\r\n        else{\r\n            fetchBooks()\r\n        }\r\n        \r\n        };\r\n\r\n\r\n        const indexOfLastBook = currentPage *  booksPerPage;\r\n        const indexOfFirstBook = indexOfLastBook - booksPerPage;\r\n        const currentBook = books.slice(indexOfFirstBook,indexOfLastBook)\r\n        const paginate = pageNumber => setCurrentPage(pageNumber)\r\n    \r\n        return(\r\n    \r\n            // muestra el input\r\n            <div className=\"all-container\">\r\n                <div className=\"header-container text-white\">\r\n                    <h1 className=\"m-4\">Search Book</h1>\r\n                    \r\n                    <form onSubmit={handleSearch} className=\"form-group\" > \r\n                        <input \r\n                            className=\"form-input\"\r\n                            placeholder=\"Title, Author\"\r\n                            type=\"text\"\r\n                            value={inputSearch}\r\n                            onChange={e=>{setInput(e.target.value)}}/>\r\n                        <button \r\n                            type= \"submit\" \r\n                            className=\"button\"\r\n                            onClick={() => setShow(true)}\r\n                            > Search</button>\r\n                    </form>\r\n                </div>\r\n                <div className=\"background\">\r\n    \r\n                {/* then shows the books in the component getbook */}\r\n               {\r\n                   show ? (<GetBooks books={currentBook} /> )   : ( <div className=\"background\"></div> )\r\n               }\r\n               \r\n               \r\n               {/* then shows the pagination to show only ten books per page */}\r\n               <Pagination \r\n                booksPerPage={booksPerPage}\r\n                totalBooks={books.length}  \r\n                paginate={paginate}/> \r\n    \r\n    \r\n                </div>\r\n    \r\n            </div>\r\n    \r\n                )//return\r\n    }//app\r\n\r\n","// import logo from './logo.svg';\nimport './App.css';\n\nimport BookSearchApp from './components/BookSearchApp'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BookSearchApp />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}